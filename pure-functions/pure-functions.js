// у функций есть характеристики, по которым мы понимаем, когда нужно разбивать код на функции, а когда нет

/* 
детерминированность
есть у нас функция Math.random. Она нужная, важная, но совершенно неудобная в отладке и тестировании. При одних и тех же входных аргументах(или их отсутствии) она может возвращать разные значения. Она недетерминированная. 
*/
Math.random()
Date.now()

/*
а если представим функцию getAge, которая принимает год рождения, а возвращает возраст. 
*/

getAge(2000); // вот она ВРОДЕ детерминированная, но нет 

/* функция недетерминированная, если ведёт себя так хотя бы единожды. Детерминированные функции ПРЕДСКАЗУЕМЫ. Для одних и тех же данных они дают один результат.*/

console.log('') // детерминированная, возвращает undefined

/* 
побочные эффекты - любые взаимодействия с внешней средой. Файловые операции, чтение, запись, отправка или приём данных по сети и даже вывод в консоль
*/

/* 
Идеальная функция с точки зрения удобства работы с ней называется чистой (pure). Чистая функция — это детерминированная функция, которая не производит побочных эффектов. Такая функция зависит только от своих входных аргументов и всегда ведёт себя предсказуемо.

Чистые функции обладают рядом ключевых достоинств:

Их просто тестировать. Достаточно передать на вход функции нужные параметры и посмотреть ожидаемый выход.
Их безопасно запускать повторно, что особенно актуально в асинхронном коде или в случае многопоточного кода.
Их легко комбинировать, получая новое поведение без необходимости переписывать программу (подробнее далее по курсу).
*/